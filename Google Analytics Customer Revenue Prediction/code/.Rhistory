na.omit() %>%
group_by_all() %>%
count() %>%
ggplot(aes(y = n,
axis1 = country, axis2 = deviceCategory, axis3 = browser,
axis4 = channelGrouping, axis5 = networkDomain)) +
geom_alluvium(aes(fill = revenue), width = 1/12) +
geom_stratum(width = 1/10, fill = "black", color = "grey") +
geom_label(stat = "stratum", label.strata = TRUE) +
theme_minimal() +
scale_x_continuous(breaks = 1:5, labels = c("country", "deviceCategory", "browser",
"channelGrouping", "networkDomain"))
tr %>%
select(country, networkDomain, browser, deviceCategory, channelGrouping) %>%
mutate(networkDomain = str_split(networkDomain, "\\.") %>% map(~ .x[[length(.x)]]) %>% unlist) %>%
mutate_all(factor) %>%
mutate_all(fct_lump, 4) %>%
bind_cols(tibble(revenue = ifelse(y == 0, "Zero", "Non-zero") %>% factor)) %>%
na.omit() %>%
filter(revenue == "Non-zero") %>%
group_by_all() %>%
count() %>%
ggplot(aes(y = n,
axis1 = country, axis2 = deviceCategory, axis3 = browser,
axis4 = channelGrouping, axis5 = networkDomain)) +
geom_alluvium(aes(fill = revenue), width = 1/12) +
geom_stratum(width = 1/10, fill = "black", color = "grey") +
geom_label(stat = "stratum", label.strata = TRUE) +
theme_minimal() +
scale_x_continuous(breaks = 1:5, labels = c("country", "deviceCategory", "browser",
"channelGrouping", "networkDomain"))
bot_browsers <- c("Mozilla Compatible Agent", "Seznam", "User Agent",
"Changa 99695759","ThumbSniper","LYF_LS_4002_12",
"[Use default User-agent string] LIVRENPOCHE", "no-ua",
"YE", "0","subjectAgent: NoticiasBoom")
tr %>%
bind_cols(tibble(revenue = y)) %>%
filter(revenue == 0 & browser %in% bot_browsers) %>%
group_by(browser)%>%
summarize(visits = n()) %>%
ungroup() %>%
ggplot(aes(reorder(browser, -visits), visits)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(x = "browser", y = "visits") +
theme(axis.text.x = element_text(angle = 60, hjust = 1),
legend.position="none")+
geom_text(aes(label = visits), vjust = -0.2, color = "black", size=2.5)
tr %>%
bind_cols(tibble(revenue = y)) %>%
filter(revenue == 0) %>%
filter(browser == "Mozilla Compatible Agent") %>%
group_by(date) %>%
summarize(visits = n()) %>%
ungroup() %>%
ggplot(aes(x = date, y = visits)) +
geom_line() +
geom_smooth() +
labs(x = "") +
theme_minimal()
tr %>%
bind_cols(tibble(revenue = y)) %>%
filter(revenue == 0) %>%
filter(browser == "Mozilla Compatible Agent") %>%
group_by(date) %>%
summarize(visits = n()) %>%
ungroup() %>%
arrange(-visits) %>%
top_n(10)
tr %>%
bind_cols(tibble(revenue = y)) %>%
filter(revenue == 0) %>%
filter(browser == "Mozilla Compatible Agent") %>%
select(date, networkDomain, country) %>%
mutate(networkDomain = str_split(networkDomain, "\\.") %>% map(~ .x[[length(.x)]]) %>% unlist) %>%
group_by_all() %>%
summarize(visits = n()) %>%
ungroup() %>%
arrange(-visits) %>%
na.omit() %>%
top_n(10)
p1 <- tr %>%
bind_cols(tibble(revenue = y)) %>%
filter(revenue == 0) %>%
filter(browser == "Mozilla Compatible Agent") %>%
group_by(country) %>%
summarize(visits = n()) %>%
ungroup() %>%
arrange(-visits) %>%
na.omit() %>%
top_n(10) %>%
ggplot(aes(reorder(country, -visits), visits)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(x = "country", y = "visits") +
theme(axis.text.x = element_text(angle = 60, hjust = 1),
legend.position="none")+
geom_text(aes(label = visits), vjust = -0.2, color = "black", size=2.5)
p2 <- tr %>%
bind_cols(tibble(revenue = y)) %>%
filter(revenue == 0) %>%
filter(browser == "Mozilla Compatible Agent") %>%
mutate(networkDomain = str_split(networkDomain, "\\.") %>% map(~ .x[[length(.x)]]) %>% unlist) %>%
group_by(networkDomain) %>%
summarize(visits = n()) %>%
ungroup() %>%
arrange(-visits) %>%
na.omit() %>%
top_n(10) %>%
ggplot(aes(reorder(networkDomain, -visits), visits)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(x = "networkDomain", y = "visits") +
theme(axis.text.x = element_text(angle = 60, hjust = 1),
legend.position="none")+
geom_text(aes(label = visits), vjust = -0.2, color = "black", size=2.5)
multiplot(p1, p2, cols=2)
m <- tr %>%
mutate(year = year(date),
month = month(date),
day = day(date),
isMobile = ifelse(isMobile, 1L, 0L),
isTrueDirect = ifelse(isMobile, 1L, 0L)) %>%
mutate_all(funs(ifelse(is.na(.), 0, .))) %>%
select(-date, -fullVisitorId, -visitId) %>%
mutate_if(is.character, factor) %>%
mutate_if(is.factor, fct_lump, prop = 0.01) %>%
model.matrix(~ . - 1, .) %>%
cor(y) %>%
data.table::as.data.table(keep.rownames=TRUE) %>%
set_names("Feature", "rho") %>%
arrange(-rho)
m %>%
ggplot(aes(x = rho)) +
geom_histogram(bins = 50, fill="steelblue") +
labs(x = "correlation") +
theme_minimal()
m %>%
filter(rho > 0.3) %>%
kable()
p1 <- tr %>%
select(pageviews) %>%
bind_cols(as_tibble(y)) %>%
filter(value > 0) %>%
ggplot(aes(x = pageviews, y = log1p(value))) +
geom_point() +
labs(x = "pageviews", y = "transaction revenue") +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal()
p2 <- tr %>%
select(hits) %>%
bind_cols(as_tibble(y)) %>%
filter(value > 0) %>%
ggplot(aes(x = hits, y = log1p(value))) +
geom_point() +
labs(x = "hits", y = "transaction revenue") +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal()
multiplot(p1, p2, cols = 2)
h2o.no_progress()
h2o.init(nthreads = 2, max_mem_size = "3G")
tr_h2o <- as.h2o(tr)
te_h2o <- as.h2o(te)
n_ae <- 4
m_ae <- h2o.deeplearning(training_frame = tr_h2o,
x = 1:ncol(tr_h2o),
autoencoder = T,
activation="Rectifier",
reproducible = TRUE,
seed = 0,
sparse = T,
standardize = TRUE,
hidden = c(32, n_ae, 32),
max_w2 = 5,
epochs = 25)
tr_ae <- h2o.deepfeatures(m_ae, tr_h2o, layer = 2) %>% as_tibble
te_ae <- h2o.deepfeatures(m_ae, te_h2o, layer = 2) %>% as_tibble
rm(tr_h2o, te_h2o, m_ae); invisible(gc())
h2o.shutdown(prompt = FALSE)
plot.pairs <- function(x, y, n=5, b=20){
pairs(x[, 1:n], cex = 0.15,
col=alpha(rainbow(b)[as.numeric(cut(y, breaks=b))], 0.2), asp=1)
}
plot.pairs(tr_ae, log1p(y), n_ae)
plot.pairs(te_ae, 1, n_ae)
tri <- 1:nrow(tr)
data <- tr %>%
bind_cols(tibble(revenue = y)) %>%
bind_rows(te) %>%
select(revenue, pageviews, hits, visitNumber, fullVisitorId) %>%
mutate_each(funs(as.numeric(.) %>% log1p), -fullVisitorId) %>%
mutate(pageviews = ifelse(is.na(pageviews), 0, pageviews))
m_lmm0 <- glmer(revenue ~ (1|fullVisitorId), data = data[tri, ])
bg_var <- summary(m_lmm0)$varcor$fullVisitorId[1]
resid_var <- attr(summary(m_lmm0)$varcor, "sc")^2
summary(m_lmm0)
m_lmm1 <- update(m_lmm0, revenue ~ pageviews + (1|fullVisitorId))
m_lmm2 <- update(m_lmm0, revenue ~ pageviews + hits + (1|fullVisitorId))
m_lmm3 <- update(m_lmm0, revenue ~ pageviews + hits + visitNumber + (1|fullVisitorId))
anova(m_lmm0, m_lmm1, m_lmm2, m_lmm3)
pred_lmm <- predict(m_lmm3)
pred_lmm[0:10]
rm(data, m_lmm0, m_lmm1, m_lmm2, m_lmm3); invisible(gc())
grp_mean <- function(x, grp) ave(x, grp, FUN = function(x) mean(x, na.rm = TRUE))
idx <- tr$date < ymd("20171201")
id <- te[, "fullVisitorId"]
tri <- 1:nrow(tr)
tr_te <- tr %>%
bind_rows(te) %>%
mutate(year = year(date) %>% factor(),
wday = wday(date) %>% factor(),
hour = hour(as_datetime(visitStartTime)) %>% factor(),
isMobile = ifelse(isMobile, 1L, 0L),
isTrueDirect = ifelse(isTrueDirect, 1L, 0L),
adwordsClickInfo.isVideoAd = ifelse(!adwordsClickInfo.isVideoAd, 0L, 1L)) %>%
select(-date, -fullVisitorId, -visitId, -hits, -visitStartTime, -sessionQualityDim, -timeOnSite) %>%
mutate_if(is.character, factor) %>%
mutate(pageviews_mean_vn = grp_mean(pageviews, visitNumber),
pageviews_mean_country = grp_mean(pageviews, country),
pageviews_mean_city = grp_mean(pageviews, city),
pageviews_mean_dom = grp_mean(pageviews, networkDomain),
pageviews_mean_ref = grp_mean(pageviews, referralPath)) %T>%
glimpse()
# rm(tr, te, tr_ae, te_ae); invisible(gc())
length(pred_avg)
str(pred_avg)
te_pred <- te %>%
bind_cols(pred_avg) %>%
glimpse()
cbind(te, pred_avg))
te_pred <- cbind(te, pred_avg)
te_pred[3]
te_pred[3,]
View(te_pred)
View(tr)
tr_actl <- cbind(tr, y)
te_pred <- cbind(te, pred_avg)
write_csv(tr_actl, "tr_actl.csv", index = FALSE)
write_csv(tr_actl, "tr_actl.csv")
write_csv(te_pred, "te_pred.csv")
e^y[0]
2.7^y[0]
2.7^-0.088
log(pred_avg)
exp(pred_avg[0:10])
y_dollar <- exp(y)
pred_avg_dollar <- exp(pred_avg)
y_dollar <- exp(y)
pred_avg_dollar <- exp(pred_avg)
tr_actl <- cbind(tr, y, y_dollar)
te_pred <- cbind(te, pred_avg, pred_avg_dollar)
write_csv(tr_actl, "tr_actl.csv")
write_csv(te_pred, "te_pred.csv")
y_dollar <- y/(10^6)
pred_avg_dollar <- exp(pred_avg)
tr_actl <- cbind(tr, y, y_dollar)
te_pred <- cbind(te, pred_avg, pred_avg_dollar)
write_csv(tr_actl, "tr_actl.csv")
write_csv(te_pred, "te_pred.csv")
y_dollar <- y/(10^6)
pred_avg_dollar <- exp(pred_avg)
tr_actl <- cbind(tr, y_dollar)
te_pred <- cbind(te, pred_avg_dollar)
write_csv(tr_actl, "tr_actl.csv")
write_csv(te_pred, "te_pred.csv")
tr_dollar <- y/(10^6)
te_dollar <- exp(pred_avg)
tr_actl <- cbind(tr, tr_dollar)
te_pred <- cbind(te, te_dollar)
write_csv(tr_actl, "tr_actl.csv")
write_csv(te_pred, "te_pred.csv")
setwd("E:/git/DDC-Workshop-R/Google Analytics Customer Revenue Prediction/code")
library(h2o)
library(caret)
library(lme4)
library(ggalluvial)
library(xgboost)
library(jsonlite)
library(lubridate)
library(knitr)
library(Rmisc)
library(scales)
library(countrycode)
library(highcharter)
library(glmnet)
library(keras)
library(forecast)
library(zoo)
library(magrittr)
library(tidyverse)
library(stringr)
library(forcats)
set.seed(0)
tr <- read_csv("../input/train_s.csv")
te <- read_csv("../input/test_s.csv")
subm <- read_csv("../input/sample_submission.csv")
cat("Train set file size:", file.size("../input/train_s.csv"), "bytes")
cat("Train set dimensions:", dim(tr))
glimpse(tr)
cat("\n")
cat("Test set file size:", file.size("../input/test_s.csv"), "bytes")
cat("Test set dimensions:", dim(te))
glimpse(te)
p1 <- tr %>% mutate(date = ymd(date),
year_month = make_date(year(date), month(date))) %>%
group_by(year_month) %>% count() %>%
ggplot(aes(x = year_month, y = n)) +
geom_bar(stat="identity", fill="steelblue") +
labs(x = "", y = "transactions", title = "Train") +
theme_minimal() +
scale_x_date(labels = date_format("%Y - %m"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_vline(aes(xintercept = max(year_month), colour = "red"), size = 1) +
theme(legend.position="none")
p2 <- te %>% mutate(date = ymd(date),
year_month = make_date(year(date), month(date))) %>%
group_by(year_month) %>% count() %>%
ggplot(aes(x = year_month, y = n)) +
geom_bar(stat="identity", fill="steelblue") +
labs(x = "", y = "transactions",  title = "Test") +
theme_minimal() +
scale_x_date(labels = date_format("%Y - %m"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
multiplot(p1, p2, cols = 2)
tr %>% select(fullVisitorId, channelGrouping, date,
socialEngagementType, visitId,
visitNumber, visitStartTime) %>%
map_dfr(n_distinct) %>%
gather() %>%
ggplot(aes(reorder(key, -value), value)) +
geom_bar(stat = "identity", fill="steelblue") +
scale_y_log10(breaks = c(5, 50, 250, 500, 1000, 10000, 50000)) +
geom_text(aes(label = value), vjust = 1.6, color = "white", size=3.5) +
theme_minimal() +
labs(x = "features", y = "Number of unique values") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
flatten_json <- . %>%
str_c(., collapse = ",") %>%
str_c("[", ., "]") %>%
fromJSON(flatten = T)
parse <- . %>%
bind_cols(flatten_json(.$customDimensions[0])) %>%
bind_cols(flatten_json(.$hits[0])) %>%
bind_cols(flatten_json(.$device)) %>%
bind_cols(flatten_json(.$geoNetwork)) %>%
bind_cols(flatten_json(.$trafficSource)) %>%
bind_cols(flatten_json(.$totals)) %>%
select(-customDimensions, -hits, -device, -geoNetwork, -trafficSource, -totals)
tr <- parse(tr)
te <- parse(te)
kable(head(tr, 2))
kable(head(te, 2))
kable(head(subm, 5))
# setdiff(names(tr), names(te))
tr %<>% select(-one_of("transactions"))
tr %<>% select(-one_of("totalTransactionRevenue"))
te %<>% select(-one_of("transactions"))
te %<>% select(-one_of("totalTransactionRevenue"))
te %<>% select(-one_of("transactionRevenue"))
setdiff(names(tr), names(te))
fea_uniq_values <- sapply(tr, n_distinct)
(fea_del <- names(fea_uniq_values[fea_uniq_values == 1]))
tr %<>% select(-one_of(fea_del))
te %<>% select(-one_of(fea_del))
names(tr)
# names(te)
is_na_val <- function(x) x %in% c("not available in demo dataset", "(not provided)",
"(not set)", "<NA>", "unknown.unknown",  "(none)")
tr %<>% mutate_all(list(~ifelse(is_na_val(.), NA, .)))
te %<>% mutate_all(list(~ifelse(is_na_val(.), NA, .)))
tr %>% summarise_all(funs(sum(is.na(.))/n()*100)) %>%
gather(key="feature", value="missing_pct") %>%
ggplot(aes(x=reorder(feature,-missing_pct),y=missing_pct)) +
geom_bar(stat="identity", fill="steelblue")+
labs(y = "missing %", x = "features") +
coord_flip() +
theme_minimal()
names(tr)
# names(te)
fea_uniq_values <- sapply(tr, n_distinct)
(fea_del <- names(fea_uniq_values[fea_uniq_values == 1]))
tr %<>% select(-one_of(fea_del))
te %<>% select(-one_of(fea_del))
names(tr)
# names(te)
tr[0:3,]
te[0:3,]
tr %<>%
mutate(date = ymd(date),
hits = as.integer(hits1),
pageviews = as.integer(pageviews),
bounces = as.integer(bounces),
newVisits = as.integer(newVisits),
transactionRevenue = as.numeric(transactionRevenue))
tr %<>% select(-one_of("hits1"))
te %<>%
mutate(date = ymd(date),
hits = as.integer(hits1),
pageviews = as.integer(pageviews),
bounces = as.integer(bounces),
newVisits = as.integer(newVisits))
te %<>% select(-one_of("hits1"))
y <- tr$transactionRevenue
tr$transactionRevenue <- NULL
summary(y)
y[is.na(y)] <- 0
summary(y)
p1 <- as_tibble(y) %>%
ggplot(aes(x = log1p(value))) +
geom_histogram(bins = 30, fill="steelblue") +
labs(x = "transaction revenue") +
theme_minimal()
p2 <- as_tibble(y[y>0]) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30, fill="steelblue") +
labs(x = "non-zero transaction revenue") +
theme_minimal()
multiplot(p1, p2, cols = 2)
as_tibble(log1p(y[y>0] / 1e6)) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30, fill="steelblue") +
labs(x = "log(non-zero transaction revenue / 1e6)") +
theme_minimal()
tr %>%
bind_cols(as_tibble(y)) %>%
ggplot(aes(x = 1:length(value), y = value)) +
geom_point(color = "steelblue",alpha=0.4, size=0.8) +
theme_minimal() +
scale_y_continuous(name="revenue", labels = comma) +
scale_x_continuous(name="index", labels = comma) +
theme(legend.position="none")
tr %>%
bind_cols(as_tibble(y)) %>%
group_by(channelGrouping) %>%
summarise(revenue = sum(value)) %>%
ggplot(aes(x = channelGrouping, y = revenue)) +
geom_point(color="steelblue", size=2) +
theme_minimal() +
scale_y_continuous(labels = comma) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
tr %>%
bind_cols(as_tibble(y)) %>%
group_by(visitNumber) %>%
summarise(revenue = sum(value)) %>%
ggplot(aes(x = visitNumber, y = revenue)) +
geom_point(color="steelblue", size=0.5) +
theme_minimal() +
scale_x_continuous(breaks=c(1, 3, 5, 10, 15, 25, 50, 100), limits=c(0, 105))+
scale_y_continuous(labels = comma)
p1 <- tr %>%
bind_cols(as_tibble(y)) %>%
group_by(date) %>%
summarize(visits = n()) %>%
ungroup() %>%
ggplot(aes(x = date, y = visits)) +
geom_line() +
geom_smooth() +
labs(x = "") +
theme_minimal()
p2 <- tr %>%
bind_cols(as_tibble(y)) %>%
group_by(date) %>%
summarize(revenue = mean(value)) %>%
ungroup()  %>%
ggplot(aes(x = date, y = revenue)) +
geom_line() +
stat_smooth() +
labs(x = "") +
theme_minimal()
multiplot(p1, p2, cols = 1)
tr %>%
bind_cols(as_tibble(y)) %>%
group_by(date, isTrueDirect) %>%
summarize(revenue = mean(value)) %>%
ungroup()  %>%
ggplot(aes(x = date, y = revenue, color = isTrueDirect)) +
stat_smooth(aes(color = isTrueDirect)) +
labs(x = "") +
theme_minimal()
tr %>%
bind_cols(tibble(revenue = y)) %>%
group_by(date) %>%
summarize(mean_revenue = log1p(mean(revenue/1e6))) %>%
ungroup() %>%
with(zoo(mean_revenue, order.by = date)) ->
revenue
h <- max(te$date) - min(te$date) + 1
revenue %>%
autoplot() +
geom_line() +
geom_smooth() +
labs(x = "", y = "log(revenue)") +
theme_minimal()
tr %>%
group_by(date) %>%
summarize(mean_pv = log1p(mean(pageviews, na.rm=TRUE))) %>%
ungroup() %$%
mean_pv ->
mean_pv_tr
te %>%
group_by(date) %>%
summarize(mean_pv = log1p(mean(pageviews, na.rm=TRUE))) %>%
ungroup() %$%
mean_pv ->
mean_pv_te
m_aa_reg <- auto.arima(revenue, xreg = mean_pv_tr)
summary(m_aa_reg)
forecast(m_aa_reg, h = h, xreg = mean_pv_te) %>%
autoplot() +
theme_minimal()
names(tr)
# names(te)
