pred_xgb[0:10]
rm(dtr, dtrain, dval, dtest, m_xgb); invisible(gc)
tibble(glmnet = pred_glm_tr, xgb = pred_xgb_tr, y = log1p(y)) %>%
mutate_all(funs(ifelse(. < 0, 0, .))) %>%
gather() %>%
ggplot(aes(x=value, fill=key)) +
geom_histogram(binwidth = .05, alpha=.6, position="identity") +
scale_y_continuous(labels = scales::comma) +
theme_minimal() +
facet_grid(key~.,  scales = "free", space = "fixed") +
scale_x_continuous(limits = c(-0.05, 3))+
labs(x = "predictions")
pred_avg <- log1p((expm1(pred_glm) + expm1(pred_xgb)) / 2)
sub <- "avg_gs.csv"
# submit(pred_xgb)
tibble(glmnet = pred_glm, xgb = pred_xgb, avg = pred_avg) %>%
mutate_all(funs(ifelse(. < 0, 0, .))) %>%
gather() %>%
ggplot(aes(x=value, fill=key)) +
geom_histogram(binwidth = .05, alpha=.6, position="identity") +
scale_y_continuous(labels = scales::comma) +
theme_minimal() +
facet_grid(key~.,  scales = "free", space = "fixed") +
scale_x_continuous(limits = c(-0.05, 3))+
labs(x = "predictions")
tr_dollar <- y/(10^6)
te_dollar <- exp(pred_avg)
tr_actl <- cbind(tr, tr_dollar)
te_pred <- cbind(te, te_dollar)
write_csv(tr_actl, "../output/tr_actl.csv")
write_csv(te_pred, "../output/te_pred.csv")
setwd("C:/Users/admin-user/Downloads/DDC-Workshop-R-master/Google Analytics Customer Revenue Prediction/code")
library(h2o)
library(caret)
library(lme4)
library(ggalluvial)
library(xgboost)
library(jsonlite)
library(lubridate)
library(knitr)
library(Rmisc)
library(scales)
library(countrycode)
library(highcharter)
library(glmnet)
library(keras)
library(forecast)
library(zoo)
library(magrittr)
library(tidyverse)
library(stringr)
library(forcats)
set.seed(0)
tr <- read_csv("../input/train_s.csv")
te <- read_csv("../input/test_s.csv")
subm <- read_csv("../input/sample_submission.csv")
cat("Train set file size:", file.size("../input/train_s.csv"), "bytes")
cat("Train set dimensions:", dim(tr))
glimpse(tr)
cat("\n")
cat("Test set file size:", file.size("../input/test_s.csv"), "bytes")
cat("Test set dimensions:", dim(te))
glimpse(te)
p1 <- tr %>% mutate(date = ymd(date),
year_month = make_date(year(date), month(date))) %>%
group_by(year_month) %>% count() %>%
ggplot(aes(x = year_month, y = n)) +
geom_bar(stat="identity", fill="steelblue") +
labs(x = "", y = "transactions", title = "Train") +
theme_minimal() +
scale_x_date(labels = date_format("%Y - %m"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_vline(aes(xintercept = max(year_month), colour = "red"), size = 1) +
theme(legend.position="none")
p2 <- te %>% mutate(date = ymd(date),
year_month = make_date(year(date), month(date))) %>%
group_by(year_month) %>% count() %>%
ggplot(aes(x = year_month, y = n)) +
geom_bar(stat="identity", fill="steelblue") +
labs(x = "", y = "transactions",  title = "Test") +
theme_minimal() +
scale_x_date(labels = date_format("%Y - %m"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
multiplot(p1, p2, cols = 2)
tr %>% select(fullVisitorId, channelGrouping, date,
socialEngagementType, visitId,
visitNumber, visitStartTime) %>%
map_dfr(n_distinct) %>%
gather() %>%
ggplot(aes(reorder(key, -value), value)) +
geom_bar(stat = "identity", fill="steelblue") +
scale_y_log10(breaks = c(5, 50, 250, 500, 1000, 10000, 50000)) +
geom_text(aes(label = value), vjust = 1.6, color = "white", size=3.5) +
theme_minimal() +
labs(x = "features", y = "Number of unique values") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
flatten_json <- . %>%
str_c(., collapse = ",") %>%
str_c("[", ., "]") %>%
fromJSON(flatten = T)
parse <- . %>%
bind_cols(flatten_json(.$customDimensions[0])) %>%
bind_cols(flatten_json(.$hits[0])) %>%
bind_cols(flatten_json(.$device)) %>%
bind_cols(flatten_json(.$geoNetwork)) %>%
bind_cols(flatten_json(.$trafficSource)) %>%
bind_cols(flatten_json(.$totals)) %>%
select(-customDimensions, -hits, -device, -geoNetwork, -trafficSource, -totals)
tr <- parse(tr)
te <- parse(te)
kable(head(tr, 2))
kable(head(te, 2))
kable(head(subm, 5))
# setdiff(names(tr), names(te))
tr %<>% select(-one_of("transactions"))
tr %<>% select(-one_of("totalTransactionRevenue"))
te %<>% select(-one_of("transactions"))
te %<>% select(-one_of("totalTransactionRevenue"))
te %<>% select(-one_of("transactionRevenue"))
setdiff(names(tr), names(te))
fea_uniq_values <- sapply(tr, n_distinct)
(fea_del <- names(fea_uniq_values[fea_uniq_values == 1]))
tr %<>% select(-one_of(fea_del))
te %<>% select(-one_of(fea_del))
names(tr)
# names(te)
is_na_val <- function(x) x %in% c("not available in demo dataset", "(not provided)",
"(not set)", "<NA>", "unknown.unknown",  "(none)")
tr %<>% mutate_all(list(~ifelse(is_na_val(.), NA, .)))
te %<>% mutate_all(list(~ifelse(is_na_val(.), NA, .)))
tr %>% summarise_all(list(~sum(is.na(.))/n()*100)) %>%
gather(key="feature", value="missing_pct") %>%
ggplot(aes(x=reorder(feature,-missing_pct),y=missing_pct)) +
geom_bar(stat="identity", fill="steelblue")+
labs(y = "missing %", x = "features") +
coord_flip() +
theme_minimal()
tr[0:3,]
te[0:3,]
tr %<>%
mutate(date = ymd(date),
hits = as.integer(hits1),
pageviews = as.integer(pageviews),
bounces = as.integer(bounces),
newVisits = as.integer(newVisits),
transactionRevenue = as.numeric(transactionRevenue))
tr %<>% select(-one_of("hits1"))
te %<>%
mutate(date = ymd(date),
hits = as.integer(hits1),
pageviews = as.integer(pageviews),
bounces = as.integer(bounces),
newVisits = as.integer(newVisits))
te %<>% select(-one_of("hits1"))
y <- tr$transactionRevenue
tr$transactionRevenue <- NULL
summary(y)
y[is.na(y)] <- 0
summary(y)
p1 <- as_tibble(y) %>%
ggplot(aes(x = log1p(value))) +
geom_histogram(bins = 30, fill="steelblue") +
labs(x = "transaction revenue") +
theme_minimal()
p2 <- as_tibble(y[y>0]) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30, fill="steelblue") +
labs(x = "non-zero transaction revenue") +
theme_minimal()
multiplot(p1, p2, cols = 2)
as_tibble(log1p(y[y>0] / 1e6)) %>%
ggplot(aes(x = value)) +
geom_histogram(bins = 30, fill="steelblue") +
labs(x = "log(non-zero transaction revenue / 1e6)") +
theme_minimal()
tr %>%
bind_cols(as_tibble(y)) %>%
ggplot(aes(x = 1:length(value), y = value)) +
geom_point(color = "steelblue",alpha=0.4, size=0.8) +
theme_minimal() +
scale_y_continuous(name="revenue", labels = comma) +
scale_x_continuous(name="index", labels = comma) +
theme(legend.position="none")
tr %>%
bind_cols(as_tibble(y)) %>%
group_by(channelGrouping) %>%
summarise(revenue = sum(value)) %>%
ggplot(aes(x = channelGrouping, y = revenue)) +
geom_point(color="steelblue", size=2) +
theme_minimal() +
scale_y_continuous(labels = comma) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
tr %>%
bind_cols(as_tibble(y)) %>%
group_by(visitNumber) %>%
summarise(revenue = sum(value)) %>%
ggplot(aes(x = visitNumber, y = revenue)) +
geom_point(color="steelblue", size=0.5) +
theme_minimal() +
scale_x_continuous(breaks=c(1, 3, 5, 10, 15, 25, 50, 100), limits=c(0, 105))+
scale_y_continuous(labels = comma)
p1 <- tr %>%
bind_cols(as_tibble(y)) %>%
group_by(date) %>%
summarize(visits = n()) %>%
ungroup() %>%
ggplot(aes(x = date, y = visits)) +
geom_line() +
geom_smooth() +
labs(x = "") +
theme_minimal()
p2 <- tr %>%
bind_cols(as_tibble(y)) %>%
group_by(date) %>%
summarize(revenue = mean(value)) %>%
ungroup()  %>%
ggplot(aes(x = date, y = revenue)) +
geom_line() +
stat_smooth() +
labs(x = "") +
theme_minimal()
multiplot(p1, p2, cols = 1)
tr %>%
bind_cols(as_tibble(y)) %>%
group_by(channelGrouping) %>%
summarize(visits = n(), mean_revenue = mean(value), total_revenue = sum(value)) %>%
ungroup() %>%
mutate(channelGrouping = reorder(channelGrouping, -visits)) %>%
data.table::melt(id.vars = c("channelGrouping")) %>%
ggplot(aes(channelGrouping, value, fill = variable)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~ variable, scales = "free") +
theme_minimal() +
labs(x = "channel grouping", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="none")
tr %>%
bind_cols(as_tibble(y)) %>%
mutate(browser = factor(browser) %>% fct_lump(prop=0.01)) %>%
group_by(browser) %>%
summarize(visits = n(), mean_revenue = mean(value), total_revenue = sum(value)) %>%
ungroup() %>%
mutate(browser = reorder(browser, -visits)) %>%
data.table::melt(id.vars = c("browser")) %>%
ggplot(aes(browser, value, fill = variable)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~ variable, scales = "free") +
theme_minimal() +
labs(x = "browser", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="none")
tr %>%
bind_cols(as_tibble(y)) %>%
mutate(operatingSystem = factor(operatingSystem) %>% fct_lump(prop=0.01)) %>%
group_by(operatingSystem) %>%
summarize(visits = n(), mean_revenue = mean(value), total_revenue = sum(value)) %>%
ungroup() %>%
mutate(operatingSystem = reorder(operatingSystem, -visits)) %>%
data.table::melt(id.vars = c("operatingSystem")) %>%
ggplot(aes(operatingSystem, value, fill = variable)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~ variable, scales = "free") +
theme_minimal() +
labs(x = "operating system", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="none")
tr %>%
bind_cols(as_tibble(y)) %>%
mutate(deviceCategory = factor(deviceCategory) %>% fct_lump(prop=0.01)) %>%
group_by(deviceCategory) %>%
summarize(visits = n(), mean_revenue = mean(value), total_revenue = sum(value)) %>%
ungroup() %>%
mutate(deviceCategory = reorder(deviceCategory, -visits)) %>%
data.table::melt(id.vars = c("deviceCategory")) %>%
ggplot(aes(deviceCategory, value, fill = variable)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~ variable, scales = "free") +
theme_minimal() +
labs(x = "device category", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="none")
tr %>%
bind_cols(as_tibble(y)) %>%
mutate(country = factor(country) %>% fct_lump(prop=0.023)) %>%
group_by(country) %>%
summarize(visits = n(), mean_revenue = mean(value), total_revenue = sum(value)) %>%
ungroup() %>%
mutate(country = reorder(country, -visits)) %>%
data.table::melt(id.vars = c("country")) %>%
ggplot(aes(country, value, fill = variable)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~ variable, scales = "free") +
theme_minimal() +
labs(x = "country", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="none")
tr %>%
bind_cols(as_tibble(y)) %>%
mutate(city = factor(city) %>% fct_lump(prop=0.01)) %>%
group_by(city) %>%
summarize(visits = n(), mean_revenue = mean(value), total_revenue = sum(value)) %>%
ungroup() %>%
mutate(city = fct_explicit_na(city, na_level = "Other") %>% reorder(-visits)) %>%
data.table::melt(id.vars = c("city")) %>%
ggplot(aes(city, value, fill = variable)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~ variable, scales = "free") +
theme_minimal() +
labs(x = "city", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="none")
tr %>%
bind_cols(as_tibble(y)) %>%
mutate(networkDomain = factor(networkDomain) %>% fct_lump(prop=0.01)) %>%
group_by(networkDomain) %>%
summarize(visits = n(), mean_revenue = mean(value), total_revenue = sum(value)) %>%
ungroup() %>%
mutate(networkDomain = fct_explicit_na(networkDomain, na_level = "Other") %>% reorder(-visits)) %>%
data.table::melt(id.vars = c("networkDomain")) %>%
ggplot(aes(networkDomain, value, fill = variable)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~ variable, scales = "free") +
theme_minimal() +
labs(x = "network domain", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="none")
tr %>%
bind_cols(as_tibble(y)) %>%
mutate(medium = factor(medium) %>% fct_lump(prop=0.005)) %>%
group_by(medium) %>%
summarize(visits = n(), mean_revenue = mean(value), total_revenue = sum(value)) %>%
ungroup() %>%
mutate(medium = fct_explicit_na(medium, na_level = "Other") %>% reorder(-visits)) %>%
data.table::melt(id.vars = c("medium")) %>%
ggplot(aes(medium, value, fill = variable)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~ variable, scales = "free") +
theme_minimal() +
labs(x = "medium", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="none")
tr %>%
select(country, networkDomain, browser, deviceCategory, channelGrouping) %>%
mutate(networkDomain = str_split(networkDomain, "\\.") %>% map(~ .x[[length(.x)]]) %>% unlist) %>%
mutate_all(factor) %>%
mutate_all(fct_lump, 4) %>%
bind_cols(tibble(revenue = ifelse(y == 0, "Zero", "Non-zero") %>% factor)) %>%
na.omit() %>%
filter(revenue == "Non-zero") %>%
group_by_all() %>%
count() %>%
ggplot(aes(y = n,
axis1 = country, axis2 = deviceCategory, axis3 = browser,
axis4 = channelGrouping, axis5 = networkDomain)) +
geom_alluvium(aes(fill = revenue), width = 1/12) +
geom_stratum(width = 1/10, fill = "black", color = "grey") +
geom_label(stat = "stratum", label.strata = TRUE) +
theme_minimal() +
scale_x_continuous(breaks = 1:5, labels = c("country", "deviceCategory", "browser",
"channelGrouping", "networkDomain"))
m <- tr %>%
mutate(year = year(date),
month = month(date),
day = day(date),
isMobile = ifelse(isMobile, 1L, 0L),
isTrueDirect = ifelse(isMobile, 1L, 0L)) %>%
mutate_all(funs(ifelse(is.na(.), 0, .))) %>%
select(-date, -fullVisitorId, -visitId) %>%
mutate_if(is.character, factor) %>%
mutate_if(is.factor, fct_lump, prop = 0.01) %>%
model.matrix(~ . - 1, .) %>%
cor(y) %>%
data.table::as.data.table(keep.rownames=TRUE) %>%
set_names("Feature", "rho") %>%
arrange(-rho)
m %>%
ggplot(aes(x = rho)) +
geom_histogram(bins = 50, fill="steelblue") +
labs(x = "correlation") +
theme_minimal()
m %>%
filter(rho > 0.3) %>%
kable()
p1 <- tr %>%
select(pageviews) %>%
bind_cols(as_tibble(y)) %>%
filter(value > 0) %>%
ggplot(aes(x = pageviews, y = log1p(value))) +
geom_point() +
labs(x = "pageviews", y = "transaction revenue") +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal()
p2 <- tr %>%
select(hits) %>%
bind_cols(as_tibble(y)) %>%
filter(value > 0) %>%
ggplot(aes(x = hits, y = log1p(value))) +
geom_point() +
labs(x = "hits", y = "transaction revenue") +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal()
multiplot(p1, p2, cols = 2)
grp_mean <- function(x, grp) ave(x, grp, FUN = function(x) mean(x, na.rm = TRUE))
idx <- tr$date < ymd("20171201")
id <- te[, "fullVisitorId"]
tri <- 1:nrow(tr)
tr_te <- tr %>%
bind_rows(te) %>%
mutate(year = year(date) %>% factor(),
wday = wday(date) %>% factor(),
hour = hour(as_datetime(visitStartTime)) %>% factor(),
isMobile = ifelse(isMobile, 1L, 0L),
isTrueDirect = ifelse(isTrueDirect, 1L, 0L),
adwordsClickInfo.isVideoAd = ifelse(!adwordsClickInfo.isVideoAd, 0L, 1L)) %>%
select(-date, -fullVisitorId, -visitId, -visitStartTime, -sessionQualityDim, -timeOnSite) %>%
mutate_if(is.character, factor) %>%
mutate(pageviews_mean_vn = grp_mean(pageviews, visitNumber),
pageviews_mean_country = grp_mean(pageviews, country),
pageviews_mean_city = grp_mean(pageviews, city),
pageviews_mean_dom = grp_mean(pageviews, networkDomain),
pageviews_mean_ref = grp_mean(pageviews, referralPath)) %T>%
glimpse()
# rm(tr, te, tr_ae, te_ae); invisible(gc())
tr_te_ohe <- tr_te %>%
mutate_if(is.factor, fct_explicit_na) %>%
mutate_if(is.numeric, funs(ifelse(is.na(.), 0L, .))) %>%
mutate_if(is.factor, fct_lump, prop = 0.05) %>%
select(-adwordsClickInfo.isVideoAd) %>%
model.matrix(~.-1, .) %>%
scale() %>%
round(4)
X <- tr_te_ohe[tri, ]
X_test <- tr_te_ohe[-tri, ]
rm(tr_te_ohe); invisible(gc())
m_glm <- cv.glmnet(X, log1p(y), alpha = 0, family="gaussian",
type.measure = "mse", nfolds = 5)
pred_glm_tr <- predict(m_glm, X, s = "lambda.min") %>% c()
pred_glm <- predict(m_glm, X_test, s = "lambda.min") %>% c()
sub <- "glmnet_gs.csv"
# submit(pred_glm)
pred_glm[0:10]
rm(m_glm); invisible(gc())
tr_te_xgb <- tr_te %>%
mutate_if(is.factor, as.integer) %>%
glimpse()
rm(tr_te); invisible(gc())
dtest <- xgb.DMatrix(data = data.matrix(tr_te_xgb[-tri, ]))
tr_te_xgb <- tr_te_xgb[tri, ]
dtr <- xgb.DMatrix(data = data.matrix(tr_te_xgb[idx, ]), label = log1p(y[idx]))
dval <- xgb.DMatrix(data = data.matrix(tr_te_xgb[!idx, ]), label = log1p(y[!idx]))
dtrain <- xgb.DMatrix(data = data.matrix(tr_te_xgb), label = log1p(y))
cols <- colnames(tr_te_xgb)
rm(tr_te_xgb); invisible(gc)
p <- list(objective = "reg:linear",
booster = "gbtree",
eval_metric = "rmse",
nthread = 4,
eta = 0.05,
max_depth = 7,
min_child_weight = 5,
gamma = 0,
subsample = 0.8,
colsample_bytree = 0.7,
colsample_bylevel = 0.6,
nrounds = 2000)
set.seed(0)
m_xgb <- xgb.train(p, dtr, p$nrounds, list(val = dval), print_every_n = 100, early_stopping_rounds = 100)
xgb.importance(cols, model = m_xgb) %>%
xgb.plot.importance(top_n = 25)
pred_xgb_tr <- predict(m_xgb, dtrain)
pred_xgb <- predict(m_xgb, dtest)
sub <- "xgb_gs.csv"
# submit(pred_xgb)
pred_xgb[0:10]
rm(dtr, dtrain, dval, dtest, m_xgb); invisible(gc)
tibble(glmnet = pred_glm_tr, xgb = pred_xgb_tr, y = log1p(y)) %>%
mutate_all(funs(ifelse(. < 0, 0, .))) %>%
gather() %>%
ggplot(aes(x=value, fill=key)) +
geom_histogram(binwidth = .05, alpha=.6, position="identity") +
scale_y_continuous(labels = scales::comma) +
theme_minimal() +
facet_grid(key~.,  scales = "free", space = "fixed") +
scale_x_continuous(limits = c(-0.05, 3))+
labs(x = "predictions")
pred_avg <- log1p((expm1(pred_glm) + expm1(pred_xgb)) / 2)
sub <- "avg_gs.csv"
# submit(pred_xgb)
tibble(glmnet = pred_glm, xgb = pred_xgb, avg = pred_avg) %>%
mutate_all(funs(ifelse(. < 0, 0, .))) %>%
gather() %>%
ggplot(aes(x=value, fill=key)) +
geom_histogram(binwidth = .05, alpha=.6, position="identity") +
scale_y_continuous(labels = scales::comma) +
theme_minimal() +
facet_grid(key~.,  scales = "free", space = "fixed") +
scale_x_continuous(limits = c(-0.05, 3))+
labs(x = "predictions")
tr_dollar <- y/(10^6)
te_dollar <- exp(pred_avg)
tr_actl <- cbind(tr, tr_dollar)
te_pred <- cbind(te, te_dollar)
write_csv(tr_actl, "../output/tr_actl.csv")
write_csv(te_pred, "../output/te_pred.csv")
