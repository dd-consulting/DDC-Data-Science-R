group_by(date) %>%
summarize(mean_pv = log1p(mean(pageviews, na.rm=TRUE))) %>%
ungroup() %$%
mean_pv ->
mean_pv_te
m_aa_reg <- auto.arima(revenue, xreg = mean_pv_tr)
summary(m_aa_reg)
forecast(m_aa_reg, h = h, xreg = mean_pv_te) %>%
autoplot() +
theme_minimal()
tr_vst <- as_datetime(tr$visitStartTime)
te_vst <- as_datetime(te$visitStartTime)
symdiff <- function(x, y) setdiff(union(x, y), intersect(x, y))
symdiff(tr_vst %>% year %>% unique, te_vst %>% year %>% unique)
symdiff(tr_vst %>% month %>% unique, te_vst %>% month %>% unique)
symdiff(tr_vst %>% day %>% unique, te_vst %>% day %>% unique)
symdiff(tr_vst %>% week %>% unique, te_vst %>% week %>% unique)
symdiff(tr_vst %>% yday %>% unique, te_vst %>% yday %>% unique)
symdiff(tr_vst %>% hour %>% unique, te_vst %>% hour %>% unique)
tr %>%
bind_cols(as_tibble(y)) %>%
group_by(channelGrouping) %>%
summarize(visits = n(), mean_revenue = mean(value), total_revenue = sum(value)) %>%
ungroup() %>%
mutate(channelGrouping = reorder(channelGrouping, -visits)) %>%
data.table::melt(id.vars = c("channelGrouping")) %>%
ggplot(aes(channelGrouping, value, fill = variable)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~ variable, scales = "free") +
theme_minimal() +
labs(x = "channel grouping", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="none")
tr %>%
bind_cols(as_tibble(y)) %>%
mutate(browser = factor(browser) %>% fct_lump(prop=0.01)) %>%
group_by(browser) %>%
summarize(visits = n(), mean_revenue = mean(value), total_revenue = sum(value)) %>%
ungroup() %>%
mutate(browser = reorder(browser, -visits)) %>%
data.table::melt(id.vars = c("browser")) %>%
ggplot(aes(browser, value, fill = variable)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~ variable, scales = "free") +
theme_minimal() +
labs(x = "browser", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="none")
tr %>%
bind_cols(as_tibble(y)) %>%
mutate(operatingSystem = factor(operatingSystem) %>% fct_lump(prop=0.01)) %>%
group_by(operatingSystem) %>%
summarize(visits = n(), mean_revenue = mean(value), total_revenue = sum(value)) %>%
ungroup() %>%
mutate(operatingSystem = reorder(operatingSystem, -visits)) %>%
data.table::melt(id.vars = c("operatingSystem")) %>%
ggplot(aes(operatingSystem, value, fill = variable)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~ variable, scales = "free") +
theme_minimal() +
labs(x = "operating system", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="none")
tr %>%
bind_cols(as_tibble(y)) %>%
mutate(deviceCategory = factor(deviceCategory) %>% fct_lump(prop=0.01)) %>%
group_by(deviceCategory) %>%
summarize(visits = n(), mean_revenue = mean(value), total_revenue = sum(value)) %>%
ungroup() %>%
mutate(deviceCategory = reorder(deviceCategory, -visits)) %>%
data.table::melt(id.vars = c("deviceCategory")) %>%
ggplot(aes(deviceCategory, value, fill = variable)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~ variable, scales = "free") +
theme_minimal() +
labs(x = "device category", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="none")
tr %>%
bind_cols(as_tibble(y)) %>%
mutate(country = factor(country) %>% fct_lump(prop=0.023)) %>%
group_by(country) %>%
summarize(visits = n(), mean_revenue = mean(value), total_revenue = sum(value)) %>%
ungroup() %>%
mutate(country = reorder(country, -visits)) %>%
data.table::melt(id.vars = c("country")) %>%
ggplot(aes(country, value, fill = variable)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~ variable, scales = "free") +
theme_minimal() +
labs(x = "country", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="none")
tr %>%
bind_cols(as_tibble(y)) %>%
mutate(city = factor(city) %>% fct_lump(prop=0.01)) %>%
group_by(city) %>%
summarize(visits = n(), mean_revenue = mean(value), total_revenue = sum(value)) %>%
ungroup() %>%
mutate(city = fct_explicit_na(city, na_level = "Other") %>% reorder(-visits)) %>%
data.table::melt(id.vars = c("city")) %>%
ggplot(aes(city, value, fill = variable)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~ variable, scales = "free") +
theme_minimal() +
labs(x = "city", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="none")
tr %>%
bind_cols(as_tibble(y)) %>%
mutate(networkDomain = factor(networkDomain) %>% fct_lump(prop=0.01)) %>%
group_by(networkDomain) %>%
summarize(visits = n(), mean_revenue = mean(value), total_revenue = sum(value)) %>%
ungroup() %>%
mutate(networkDomain = fct_explicit_na(networkDomain, na_level = "Other") %>% reorder(-visits)) %>%
data.table::melt(id.vars = c("networkDomain")) %>%
ggplot(aes(networkDomain, value, fill = variable)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~ variable, scales = "free") +
theme_minimal() +
labs(x = "network domain", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="none")
tr %>%
bind_cols(as_tibble(y)) %>%
mutate(medium = factor(medium) %>% fct_lump(prop=0.005)) %>%
group_by(medium) %>%
summarize(visits = n(), mean_revenue = mean(value), total_revenue = sum(value)) %>%
ungroup() %>%
mutate(medium = fct_explicit_na(medium, na_level = "Other") %>% reorder(-visits)) %>%
data.table::melt(id.vars = c("medium")) %>%
ggplot(aes(medium, value, fill = variable)) +
geom_bar(stat = "identity") +
scale_y_continuous(labels = scales::comma) +
facet_wrap(~ variable, scales = "free") +
theme_minimal() +
labs(x = "medium", y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position="none")
tr %>%
select(country, networkDomain, browser, deviceCategory, channelGrouping) %>%
mutate(networkDomain = str_split(networkDomain, "\\.") %>% map(~ .x[[length(.x)]]) %>% unlist) %>%
mutate_all(factor) %>%
mutate_all(fct_lump, 4) %>%
bind_cols(tibble(revenue = ifelse(y == 0, "Zero", "Non-zero") %>% factor)) %>%
na.omit() %>%
group_by_all() %>%
count() %>%
ggplot(aes(y = n,
axis1 = country, axis2 = deviceCategory, axis3 = browser,
axis4 = channelGrouping, axis5 = networkDomain)) +
geom_alluvium(aes(fill = revenue), width = 1/12) +
geom_stratum(width = 1/10, fill = "black", color = "grey") +
geom_label(stat = "stratum", label.strata = TRUE) +
theme_minimal() +
scale_x_continuous(breaks = 1:5, labels = c("country", "deviceCategory", "browser",
"channelGrouping", "networkDomain"))
tr %>%
select(country, networkDomain, browser, deviceCategory, channelGrouping) %>%
mutate(networkDomain = str_split(networkDomain, "\\.") %>% map(~ .x[[length(.x)]]) %>% unlist) %>%
mutate_all(factor) %>%
mutate_all(fct_lump, 4) %>%
bind_cols(tibble(revenue = ifelse(y == 0, "Zero", "Non-zero") %>% factor)) %>%
na.omit() %>%
filter(revenue == "Non-zero") %>%
group_by_all() %>%
count() %>%
ggplot(aes(y = n,
axis1 = country, axis2 = deviceCategory, axis3 = browser,
axis4 = channelGrouping, axis5 = networkDomain)) +
geom_alluvium(aes(fill = revenue), width = 1/12) +
geom_stratum(width = 1/10, fill = "black", color = "grey") +
geom_label(stat = "stratum", label.strata = TRUE) +
theme_minimal() +
scale_x_continuous(breaks = 1:5, labels = c("country", "deviceCategory", "browser",
"channelGrouping", "networkDomain"))
bot_browsers <- c("Mozilla Compatible Agent", "Seznam", "User Agent",
"Changa 99695759","ThumbSniper","LYF_LS_4002_12",
"[Use default User-agent string] LIVRENPOCHE", "no-ua",
"YE", "0","subjectAgent: NoticiasBoom")
tr %>%
bind_cols(tibble(revenue = y)) %>%
filter(revenue == 0 & browser %in% bot_browsers) %>%
group_by(browser)%>%
summarize(visits = n()) %>%
ungroup() %>%
ggplot(aes(reorder(browser, -visits), visits)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(x = "browser", y = "visits") +
theme(axis.text.x = element_text(angle = 60, hjust = 1),
legend.position="none")+
geom_text(aes(label = visits), vjust = -0.2, color = "black", size=2.5)
tr %>%
bind_cols(tibble(revenue = y)) %>%
filter(revenue == 0) %>%
filter(browser == "Mozilla Compatible Agent") %>%
group_by(date) %>%
summarize(visits = n()) %>%
ungroup() %>%
ggplot(aes(x = date, y = visits)) +
geom_line() +
geom_smooth() +
labs(x = "") +
theme_minimal()
tr %>%
bind_cols(tibble(revenue = y)) %>%
filter(revenue == 0) %>%
filter(browser == "Mozilla Compatible Agent") %>%
group_by(date) %>%
summarize(visits = n()) %>%
ungroup() %>%
arrange(-visits) %>%
top_n(10)
tr %>%
bind_cols(tibble(revenue = y)) %>%
filter(revenue == 0) %>%
filter(browser == "Mozilla Compatible Agent") %>%
select(date, networkDomain, country) %>%
mutate(networkDomain = str_split(networkDomain, "\\.") %>% map(~ .x[[length(.x)]]) %>% unlist) %>%
group_by_all() %>%
summarize(visits = n()) %>%
ungroup() %>%
arrange(-visits) %>%
na.omit() %>%
top_n(10)
p1 <- tr %>%
bind_cols(tibble(revenue = y)) %>%
filter(revenue == 0) %>%
filter(browser == "Mozilla Compatible Agent") %>%
group_by(country) %>%
summarize(visits = n()) %>%
ungroup() %>%
arrange(-visits) %>%
na.omit() %>%
top_n(10) %>%
ggplot(aes(reorder(country, -visits), visits)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(x = "country", y = "visits") +
theme(axis.text.x = element_text(angle = 60, hjust = 1),
legend.position="none")+
geom_text(aes(label = visits), vjust = -0.2, color = "black", size=2.5)
p2 <- tr %>%
bind_cols(tibble(revenue = y)) %>%
filter(revenue == 0) %>%
filter(browser == "Mozilla Compatible Agent") %>%
mutate(networkDomain = str_split(networkDomain, "\\.") %>% map(~ .x[[length(.x)]]) %>% unlist) %>%
group_by(networkDomain) %>%
summarize(visits = n()) %>%
ungroup() %>%
arrange(-visits) %>%
na.omit() %>%
top_n(10) %>%
ggplot(aes(reorder(networkDomain, -visits), visits)) +
geom_bar(stat = "identity", fill = "steelblue") +
theme_minimal() +
labs(x = "networkDomain", y = "visits") +
theme(axis.text.x = element_text(angle = 60, hjust = 1),
legend.position="none")+
geom_text(aes(label = visits), vjust = -0.2, color = "black", size=2.5)
multiplot(p1, p2, cols=2)
m <- tr %>%
mutate(year = year(date),
month = month(date),
day = day(date),
isMobile = ifelse(isMobile, 1L, 0L),
isTrueDirect = ifelse(isMobile, 1L, 0L)) %>%
mutate_all(funs(ifelse(is.na(.), 0, .))) %>%
select(-date, -fullVisitorId, -visitId, -hits1) %>%
mutate_if(is.character, factor) %>%
mutate_if(is.factor, fct_lump, prop = 0.01) %>%
model.matrix(~ . - 1, .) %>%
cor(y) %>%
data.table::as.data.table(keep.rownames=TRUE) %>%
set_names("Feature", "rho") %>%
arrange(-rho)
m_ae <- h2o.deeplearning(training_frame = tr_h2o,
x = 1:ncol(tr_h2o),
autoencoder = T,
activation="Rectifier",
reproducible = TRUE,
seed = 0,
sparse = T,
standardize = TRUE,
hidden = c(32, n_ae, 32),
max_w2 = 5,
epochs = 25)
h2o.no_progress()
h2o.init(nthreads = 2, max_mem_size = "3G")
tr_h2o <- as.h2o(tr)
te_h2o <- as.h2o(te)
n_ae <- 4
m_ae <- h2o.deeplearning(training_frame = tr_h2o,
x = 1:ncol(tr_h2o),
autoencoder = T,
activation="Rectifier",
reproducible = TRUE,
seed = 0,
sparse = T,
standardize = TRUE,
hidden = c(32, n_ae, 32),
max_w2 = 5,
epochs = 25)
tr_ae <- h2o.deepfeatures(m_ae, tr_h2o, layer = 2) %>% as_tibble
te_ae <- h2o.deepfeatures(m_ae, te_h2o, layer = 2) %>% as_tibble
rm(tr_h2o, te_h2o, m_ae); invisible(gc())
h2o.shutdown(prompt = FALSE)
plot.pairs <- function(x, y, n=5, b=20){
pairs(x[, 1:n], cex = 0.15,
col=alpha(rainbow(b)[as.numeric(cut(y, breaks=b))], 0.2), asp=1)
}
plot.pairs(tr_ae, log1p(y), n_ae)
plot.pairs(te_ae, 1, n_ae)
tri <- 1:nrow(tr)
data <- tr %>%
bind_cols(tibble(revenue = y)) %>%
bind_rows(te) %>%
select(revenue, pageviews, hits, visitNumber, fullVisitorId) %>%
mutate_each(funs(as.numeric(.) %>% log1p), -fullVisitorId) %>%
mutate(pageviews = ifelse(is.na(pageviews), 0, pageviews))
m_lmm0 <- glmer(revenue ~ (1|fullVisitorId), data = data[tri, ])
bg_var <- summary(m_lmm0)$varcor$fullVisitorId[1]
resid_var <- attr(summary(m_lmm0)$varcor, "sc")^2
summary(m_lmm0)
m_lmm1 <- update(m_lmm0, revenue ~ pageviews + (1|fullVisitorId))
m_lmm2 <- update(m_lmm0, revenue ~ pageviews + hits + (1|fullVisitorId))
m_lmm3 <- update(m_lmm0, revenue ~ pageviews + hits + visitNumber + (1|fullVisitorId))
anova(m_lmm0, m_lmm1, m_lmm2, m_lmm3)
pred_lmm <- predict(m_lmm3)
pred_lmm[0:10]
rm(data, m_lmm0, m_lmm1, m_lmm2, m_lmm3); invisible(gc())
grp_mean <- function(x, grp) ave(x, grp, FUN = function(x) mean(x, na.rm = TRUE))
idx <- tr$date < ymd("20171201")
id <- te[, "fullVisitorId"]
tri <- 1:nrow(tr)
tr_te <- tr %>%
bind_rows(te) %>%
mutate(year = year(date) %>% factor(),
wday = wday(date) %>% factor(),
hour = hour(as_datetime(visitStartTime)) %>% factor(),
isMobile = ifelse(isMobile, 1L, 0L),
isTrueDirect = ifelse(isTrueDirect, 1L, 0L),
adwordsClickInfo.isVideoAd = ifelse(!adwordsClickInfo.isVideoAd, 0L, 1L)) %>%
select(-date, -fullVisitorId, -visitId, -hits, -hits1, -customDimensions, -sessionQualityDim, -timeOnSite, -transactions, -totalTransactionRevenue, -transactionRevenue, -visitStartTime) %>%
mutate_if(is.character, factor) %>%
mutate(pageviews_mean_vn = grp_mean(pageviews, visitNumber),
pageviews_mean_country = grp_mean(pageviews, country),
pageviews_mean_city = grp_mean(pageviews, city),
pageviews_mean_dom = grp_mean(pageviews, networkDomain),
pageviews_mean_ref = grp_mean(pageviews, referralPath)) %T>%
glimpse()
grp_mean <- function(x, grp) ave(x, grp, FUN = function(x) mean(x, na.rm = TRUE))
idx <- tr$date < ymd("20171201")
id <- te[, "fullVisitorId"]
tri <- 1:nrow(tr)
tr_te <- tr %>%
bind_rows(te) %>%
mutate(year = year(date) %>% factor(),
wday = wday(date) %>% factor(),
hour = hour(as_datetime(visitStartTime)) %>% factor(),
isMobile = ifelse(isMobile, 1L, 0L),
isTrueDirect = ifelse(isTrueDirect, 1L, 0L),
adwordsClickInfo.isVideoAd = ifelse(!adwordsClickInfo.isVideoAd, 0L, 1L)) %>%
select(-date, -fullVisitorId, -visitId, -hits, -customDimensions, -sessionQualityDim, -timeOnSite, -transactionRevenue, -visitStartTime) %>%
mutate_if(is.character, factor) %>%
mutate(pageviews_mean_vn = grp_mean(pageviews, visitNumber),
pageviews_mean_country = grp_mean(pageviews, country),
pageviews_mean_city = grp_mean(pageviews, city),
pageviews_mean_dom = grp_mean(pageviews, networkDomain),
pageviews_mean_ref = grp_mean(pageviews, referralPath)) %T>%
glimpse()
grp_mean <- function(x, grp) ave(x, grp, FUN = function(x) mean(x, na.rm = TRUE))
idx <- tr$date < ymd("20171201")
id <- te[, "fullVisitorId"]
tri <- 1:nrow(tr)
tr_te <- tr %>%
bind_rows(te) %>%
mutate(year = year(date) %>% factor(),
wday = wday(date) %>% factor(),
hour = hour(as_datetime(visitStartTime)) %>% factor(),
isMobile = ifelse(isMobile, 1L, 0L),
isTrueDirect = ifelse(isTrueDirect, 1L, 0L),
adwordsClickInfo.isVideoAd = ifelse(!adwordsClickInfo.isVideoAd, 0L, 1L)) %>%
select(-date, -fullVisitorId, -visitId, -hits, -sessionQualityDim, -timeOnSite, -transactionRevenue, -visitStartTime) %>%
mutate_if(is.character, factor) %>%
mutate(pageviews_mean_vn = grp_mean(pageviews, visitNumber),
pageviews_mean_country = grp_mean(pageviews, country),
pageviews_mean_city = grp_mean(pageviews, city),
pageviews_mean_dom = grp_mean(pageviews, networkDomain),
pageviews_mean_ref = grp_mean(pageviews, referralPath)) %T>%
glimpse()
grp_mean <- function(x, grp) ave(x, grp, FUN = function(x) mean(x, na.rm = TRUE))
idx <- tr$date < ymd("20171201")
id <- te[, "fullVisitorId"]
tri <- 1:nrow(tr)
tr_te <- tr %>%
bind_rows(te) %>%
mutate(year = year(date) %>% factor(),
wday = wday(date) %>% factor(),
hour = hour(as_datetime(visitStartTime)) %>% factor(),
isMobile = ifelse(isMobile, 1L, 0L),
isTrueDirect = ifelse(isTrueDirect, 1L, 0L),
adwordsClickInfo.isVideoAd = ifelse(!adwordsClickInfo.isVideoAd, 0L, 1L)) %>%
select(-date, -fullVisitorId, -visitId, -hits, -visitStartTime, -sessionQualityDim, -timeOnSite) %>%
mutate_if(is.character, factor) %>%
mutate(pageviews_mean_vn = grp_mean(pageviews, visitNumber),
pageviews_mean_country = grp_mean(pageviews, country),
pageviews_mean_city = grp_mean(pageviews, city),
pageviews_mean_dom = grp_mean(pageviews, networkDomain),
pageviews_mean_ref = grp_mean(pageviews, referralPath)) %T>%
glimpse()
# rm(tr, te, tr_ae, te_ae); invisible(gc())
submit <- . %>%
as_tibble() %>%
set_names("y") %>%
mutate(y = ifelse(y < 0, 0, expm1(y))) %>%
bind_cols(id) %>%
group_by(toString(fullVisitorId)) %>%
summarise(y = log1p(sum(y))) %>%
right_join(
read_csv("../input/sample_submission.csv"),
by = "fullVisitorId") %>%
mutate(PredictedLogRevenue = round(y, 5)) %>%
select(-y) %>%
write_csv(sub)
tr_te_ohe <- tr_te %>%
mutate_if(is.factor, fct_explicit_na) %>%
mutate_if(is.numeric, funs(ifelse(is.na(.), 0L, .))) %>%
mutate_if(is.factor, fct_lump, prop = 0.05) %>%
select(-adwordsClickInfo.isVideoAd) %>%
model.matrix(~.-1, .) %>%
scale() %>%
round(4)
X <- tr_te_ohe[tri, ]
X_test <- tr_te_ohe[-tri, ]
rm(tr_te_ohe); invisible(gc())
m_glm <- cv.glmnet(X, log1p(y), alpha = 0, family="gaussian",
type.measure = "mse", nfolds = 5)
pred_glm_tr <- predict(m_glm, X, s = "lambda.min") %>% c()
pred_glm <- predict(m_glm, X_test, s = "lambda.min") %>% c()
sub <- "glmnet_gs.csv"
submit(pred_glm)
pred_glm_tr <- predict(m_glm, X, s = "lambda.min") %>% c()
pred_glm <- predict(m_glm, X_test, s = "lambda.min") %>% c()
sub <- "glmnet_gs.csv"
# submit(pred_glm)
pred_glm[0:10]
rm(m_glm); invisible(gc())
tr_te_xgb <- tr_te %>%
mutate_if(is.factor, as.integer) %>%
glimpse()
rm(tr_te); invisible(gc())
dtest <- xgb.DMatrix(data = data.matrix(tr_te_xgb[-tri, ]))
tr_te_xgb <- tr_te_xgb[tri, ]
dtr <- xgb.DMatrix(data = data.matrix(tr_te_xgb[idx, ]), label = log1p(y[idx]))
dval <- xgb.DMatrix(data = data.matrix(tr_te_xgb[!idx, ]), label = log1p(y[!idx]))
dtrain <- xgb.DMatrix(data = data.matrix(tr_te_xgb), label = log1p(y))
cols <- colnames(tr_te_xgb)
rm(tr_te_xgb); invisible(gc)
p <- list(objective = "reg:linear",
booster = "gbtree",
eval_metric = "rmse",
nthread = 4,
eta = 0.05,
max_depth = 7,
min_child_weight = 5,
gamma = 0,
subsample = 0.8,
colsample_bytree = 0.7,
colsample_bylevel = 0.6,
nrounds = 2000)
set.seed(0)
m_xgb <- xgb.train(p, dtr, p$nrounds, list(val = dval), print_every_n = 100, early_stopping_rounds = 100)
xgb.importance(cols, model = m_xgb) %>%
xgb.plot.importance(top_n = 25)
pred_xgb_tr <- predict(m_xgb, dtrain)
pred_xgb <- predict(m_xgb, dtest)
sub <- "xgb_gs.csv"
# submit(pred_xgb)
pred_xgb[0:10]
rm(dtr, dtrain, dval, dtest, m_xgb); invisible(gc)
tibble(lmm = pred_lmm, glmnet = pred_glm_tr, xgb = pred_xgb_tr, y = log1p(y)) %>%
mutate_all(funs(ifelse(. < 0, 0, .))) %>%
gather() %>%
ggplot(aes(x=value, fill=key)) +
geom_histogram(binwidth = .05, alpha=.6, position="identity") +
scale_y_continuous(labels = scales::comma) +
theme_minimal() +
facet_grid(key~.,  scales = "free", space = "fixed") +
scale_x_continuous(limits = c(-0.05, 3))+
labs(x = "predictions")
pred_avg <- log1p((expm1(pred_glm) + expm1(pred_xgb)) / 2)
sub <- "avg_gs.csv"
# submit(pred_xgb)
tibble(glmnet = pred_glm, xgb = pred_xgb, avg = pred_avg) %>%
mutate_all(funs(ifelse(. < 0, 0, .))) %>%
gather() %>%
ggplot(aes(x=value, fill=key)) +
geom_histogram(binwidth = .05, alpha=.6, position="identity") +
scale_y_continuous(labels = scales::comma) +
theme_minimal() +
facet_grid(key~.,  scales = "free", space = "fixed") +
scale_x_continuous(limits = c(-0.05, 3))+
labs(x = "predictions")
